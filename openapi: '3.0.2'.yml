openapi: "3.0.2"
info:
    title: Tendon API
    version: "1.0"
servers:
    # - url: http://146.190.122.208:8080/api/v1
    - url: "http://localhost:8080/api/v1"
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        user:
            type: object
            properties:
                type:
                    type: string
                    example: "user"
                id:
                    type: string
                    example: "6303306a448342f4bb47fb2e"
                firstName:
                    type: string
                    example: "John"
                lastName:
                    type: string
                    example: "dodo"
                email:
                    type: string
                    example: "John@email.com"
                role:
                    type: string
                    example: "student"
                    enum:
                        - student
                        - teacher
                        - admin
                createAt:
                    type: string
                    example: 2022-12-23T14:45:31.495Z
                updateAt:
                    type: string
                    example: 2022-12-23T14:45:31.495Z

        course:
            type: object
            properties:
                id:
                    type: string
                    example: "63173c3f997fd51cea50fb32"
                name:
                    type: string
                    example: "Gen physics"
                description:
                    type: string
                    example: "University physics for year 1"
                access:
                    type: string
                    enum:
                        - public
                        - inviteOnly
                        - private
                createBy:
                    type: string
                    example: "6303306a448342f4bb47fb2e"
                updateAt:
                    type: string
                lesssons:
                    type: array
                    items:
                        type: string
                    example:
                        ["6303306a448342f4bb47fb2e", "6303306a448342f4bb47fb20"]
        lesson:
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                description:
                    type: string
                access:
                    type: string
                    enum:
                        - public
                        - inviteOnly
                        - private
                createBy:
                    type: string
                updateAt:
                    type: string
                    example: 2022-12-23T14:45:31.495Z
                nodes :
                    type: array
                    items: 
                        type: string
                    example:
                        ["6303306a448342f4bb47fb2e", "6303306a448342f4bb47fb20"]
                nextLesson:
                    type: array
                    items:
                        type: string
                    example:
                        ["6303306a448342f4bb47fb2e", "6303306a448342f4bb47fb20"]
                prevLesson:
                    type: array
                    items:
                        type: string
                    example:
                        ["6303306a448342f4bb47fb2e", "6303306a448342f4bb47fb20"]

        node:
            type: object
            properties:
                id:
                    type: string
                type:
                    type: string
                    enum:
                        - pdfNode
                        - videoNode
                        - textNode
                        - soundNode
                        - imageNode
                data:
                    type: string
                createBy:
                    type: string
                    example: "63173c3f997fd51cea50fb32"
                updateAt:
                    type: string
                    example: 2022-12-23T14:45:31.495Z

    responses:
        unauthorizedError:
            description: access token is missing or invalid
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            massage:
                                type: string
                                example: unauthorized
        notFoundError:
            description: not found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            massage:
                                type: string
                                example: not found
        inputError:
            description: input in wrong format or conflict
            content:
                application/json:
                    schema:
                        type: object
                    examples:
                        fieldNotExit:
                            value:
                                message: some field not exit
                        emailAlreadyUse:
                            value:
                                massage: this email is already use
                        passwordToShort:
                            value:
                                massage: password must at least 12 characters long
                        passwordToEasy:
                            value:
                                massage: password must a combination of uppercase letters, lowercase letters, numbers, and symbols.

paths:
    /auth/users/{id}:
        get:
            description: get user information at specific id (Only admin user)
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: get user information success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                    firstName:
                                        type: string
                                    lastName:
                                        type: string
                                    email:
                                        type: string
                                    updateAt:
                                        type: string
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        patch:
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            security:
                - bearerAuth: []
            requestBody:
                description: Can sent only some attributes
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                    example: "John"
                                lastName:
                                    type: string
                                    example: "dodo"
                                email:
                                    type: string
                                    example: "John@email.com"
                                password:
                                    type: string
                                    example: "43aad@#134"
            responses:
                "200":
                    description: success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                    firstName:
                                        type: string
                                    lastName:
                                        type: string
                                    email:
                                        type: string
                                    updateAt:
                                        type: string
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

        delete:
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: success
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
                "406":
                    description: wrong email or password
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: wrong email or password

    /user/sign-up:
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - firstName
                                - lastName
                                - email
                                - password
                            properties:
                                firstName:
                                    type: string
                                    example: "NewName"
                                lastName:
                                    type: string
                                    example: "NewLastName"
                                email:
                                    type: string
                                    example: "test@email.com"
                                password:
                                    type: string
                                    format: password
                                    example: "NewPassword"
            responses:
                "201":
                    description: success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                    lastName:
                                        type: string
                                    email:
                                        type: string
                                        format: email
                                    password:
                                        type: string
                                    accessToken:
                                        type: string
                "400":
                    $ref: "#/components/responses/inputError"

    /user/sign-in:
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: test@email.com
                                password:
                                    type: string
                                    format: password
                                    example: NewPassword
            responses:
                "200":
                    description: success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                    lastName:
                                        type: string
                                    email:
                                        type: string
                                        format: email
                                    password:
                                        type: string
                                    accessToken:
                                        type: string
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    description: wrong email or password
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: wrong email or password

    /user/sign-out:
        post:
            security:
                - bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                accessToken:
                                    type: string
                                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0ZW5kb25CYWNrZW5kIiwic3ViIjoiNjNhNWJmMGJlNWRjNDUwNzdlMDg5NTFjIiwiZXhwIjoxNjcxODA3MDMxLCJuYmYiOjE2NzE4MDY3MzEsImlhdCI6MTY3MTgwNjczMSwianRpIjoiNjNhNWJmMGJlNWRjNDUwNzdlMDg5NTFkIn0.HD2Syb69kBLwk7xcWj5HKA1en931r4X3RoFgfzwRlTM
            responses:
                "200":
                    description: logout success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Success
                "400":
                    $ref: "#/components/responses/inputError"

    /token/refresh:
        post:
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Everything went fine
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"

    /auth/courses/{id}:
        get:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/course"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        patch:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: "Gen physics"
                                description:
                                    type: string
                                    example: "University physics for year 1"
                                access:
                                    type: string
                                    enum:
                                        - public
                                        - inviteOnly
                                        - private
                                createBy:
                                    type: string
                                lessons:
                                    type: array
                                    items:
                                        type: string
                                        example: learningNodeID
            responses:
                "200":
                    description: success
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        delete:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

    /auth/courses:
        post:
            security:
                - bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    example: "Gen physics"
                                description:
                                    type: string
                                    example: "University physics for year 1"
                                access:
                                    type: string
                                    enum:
                                        - public
                                        - inviteOnly
                                        - private
                                lessons:
                                    type: array
                                    items:
                                        type: string
            responses:
                "200":
                    description: Everything went fine
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

    /auth/lessons/{id}:
        get:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/lesson"
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        patch:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                description:
                                    type: string
                                access:
                                    type: string
                                createBy:
                                    type: string
                                nodes:
                                    type: array
                                    items:
                                        type: string
                                nextLesson:
                                    type: array
                                    items:
                                        type: string
                                prevLesson:
                                    type: array
                                    items:
                                        type: string
            responses:
                "200":
                    description: success
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        delete:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
    /auth/lessons:
        post:
            security:
                - bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                description:
                                    type: string
                                access:
                                    type: string
                                createBy:
                                    type: string
                                nodes:
                                    type: array
                                    items:
                                        type: string
                                nextLesson:
                                    type: array
                                    items:
                                        type: string
                                prevLesson:
                                    type: array
                                    items:
                                        type: string
            responses:
                "200":
                    description: Everything went fine
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

    /auth/nodes/{id}:
        get:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/node"
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        patch:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                data:
                                    type: string
            responses:
                "200":
                    description: success
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"
        delete:
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: success
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

    /auth/nodes:
        post:
            security:
                - bearerAuth: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                data:
                                    type: string
            responses:
                "200":
                    description: Everything went fine
                "400":
                    $ref: "#/components/responses/inputError"
                "401":
                    $ref: "#/components/responses/unauthorizedError"
                "404":
                    $ref: "#/components/responses/notFoundError"

    # /resources/video/{id}:
    #     get:
    #         parameters:
    #                 - name: id
    #                   in: path
    #                   required: true
    #                   schema:
    #                       type: string
    #         responses:
    #             "200":
    #                 description: Everything went fine
    # /resources/video:
    #     post:
    #         requestBody:
    #             content:
    #                 multipart/form-data:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             nodeId:
    #                                 type: string
    #                             userId:
    #                                 type: string
    #                             fileName:
    #                                 type: string
    #                                 format: binary
    #         responses:
    #             "200":
    #                 description: Everything went fine

    # /resources/pdf/{id}:
    #     get:
    #         parameters:
    #             - name: id
    #               in: path
    #               required: true
    #               schema:
    #                   type: string
    #         responses:
    #             "200":
    #                 description: Everything went fine
    # /resources/pdf:
    #     post:
    #         requestBody:
    #             content:
    #                 multipart/form-data:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             nodeId:
    #                                 type: string
    #                             userId:
    #                                 type: string
    #                             fileName:
    #                                 type: string
    #                                 format: binary
    #         responses:
    #             "200":
    #                 description: Everything went fine

    # /resources/text/{id}:
    #     get:
    #         parameters:
    #             - name: id
    #               in: path
    #               required: true
    #               schema:
    #                   type: string
    #         responses:
    #             "200":
    #                 description: Everything went fine
    # /resources/text:
    #     post:
    #         requestBody:
    #             content:
    #                 multipart/form-data:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             nodeId:
    #                                 type: string
    #                             userId:
    #                                 type: string
    #                             fileName:
    #                                 type: string
    #                                 format: binary
    #         responses:
    #             "200":
    #                 description: Everything went fine

    # /resources/image/{id}:
    #     get:
    #         parameters:
    #             - name: id
    #               in: path
    #               required: true
    #               schema:
    #                   type: string
    #         responses:
    #             "200":
    #                 description: Everything went fine

    # /resources/image:
    #     post:
    #         requestBody:
    #             content:
    #                 multipart/form-data:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             nodeId:
    #                                 type: string
    #                             userId:
    #                                 type: string
    #                             fileName:
    #                                 type: string
    #                                 format: binary
    #         responses:
    #             "200":
    #                 description: Everything went fine
    # /resources/sound/{id}:
    #     get:
    #         parameters:
    #                 - name: id
    #                   in: path
    #                   required: true
    #                   schema:
    #                       type: string
    #         responses:
    #             "200":
    #                 description: Everything went fine
    # /resources/sound:
    #     post:
    #         requestBody:
    #             content:
    #                 multipart/form-data:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             nodeId:
    #                                 type: string
    #                             userId:
    #                                 type: string
    #                             fileName:
    #                                 type: string
    #                                 format: binary
    #         responses:
    #             "200":
    #                 description: Everything went fine
